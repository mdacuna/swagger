# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BookResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, title: str=None, description: str=None, author: str=None):  # noqa: E501
        """BookResponse - a model defined in Swagger

        :param id: The id of this BookResponse.  # noqa: E501
        :type id: str
        :param title: The title of this BookResponse.  # noqa: E501
        :type title: str
        :param description: The description of this BookResponse.  # noqa: E501
        :type description: str
        :param author: The author of this BookResponse.  # noqa: E501
        :type author: str
        """
        self.swagger_types = {
            'id': str,
            'title': str,
            'description': str,
            'author': str
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'description': 'description',
            'author': 'author'
        }
        self._id = id
        self._title = title
        self._description = description
        self._author = author

    @classmethod
    def from_dict(cls, dikt) -> 'BookResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BookResponse of this BookResponse.  # noqa: E501
        :rtype: BookResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this BookResponse.


        :return: The id of this BookResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this BookResponse.


        :param id: The id of this BookResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this BookResponse.


        :return: The title of this BookResponse.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this BookResponse.


        :param title: The title of this BookResponse.
        :type title: str
        """

        self._title = title

    @property
    def description(self) -> str:
        """Gets the description of this BookResponse.


        :return: The description of this BookResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this BookResponse.


        :param description: The description of this BookResponse.
        :type description: str
        """

        self._description = description

    @property
    def author(self) -> str:
        """Gets the author of this BookResponse.


        :return: The author of this BookResponse.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author: str):
        """Sets the author of this BookResponse.


        :param author: The author of this BookResponse.
        :type author: str
        """

        self._author = author
